<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wg on Go Lang Notes</title>
    <link>http://thomaskoefod.com/go1/tags/wg/</link>
    <description>Recent content in Wg on Go Lang Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://thomaskoefod.com/go1/tags/wg/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wait Groups</title>
      <link>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_iii/</guid>
      <description> the convience of Wait Groups iterating over channels example:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; ) var wg sync.WaitGroup func foo(c chan int, someValue int){ defer wg.Done() c &amp;lt;- someValue * 5 } func main() { fooVal := make(chan int, 10) for i := 0; i &amp;lt; 10 ; i++ { wg.Add(1) go foo(fooVal, i) } wg.Wait() close(fooVal) for item := range fooVal { fmt.Println(item) } }  </description>
    </item>
    
  </channel>
</rss>