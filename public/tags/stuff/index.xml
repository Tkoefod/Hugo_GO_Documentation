<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stuff on Go Lang Notes</title>
    <link>http://thomaskoefod.com/go1/tags/stuff/</link>
    <description>Recent content in Stuff on Go Lang Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://thomaskoefod.com/go1/tags/stuff/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/getting_started/</guid>
      <description>In GO programmers use camel case for names so things like &amp;lsquo;CamelCase&amp;rsquo; or &amp;lsquo;camelCase&amp;rsquo; but not &amp;lsquo;camel_case&amp;rsquo;.
Main types of Declarations:    name type syntax example     var variable var name type = expression var myVar int = 5   const constant     type      func function      Types of Variables    name type example     int integer number 25   float64 long 64 bit decimal 1.</description>
    </item>
    
    <item>
      <title>Reserved Names</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</guid>
      <description> 25 keywords that are reserved Go has 25 keywords that are reserved for the system.
 break select case struct chan switch const type continue var default defer else fallthrough for func go goto if import interface map package range return  </description>
    </item>
    
    <item>
      <title>Templates What are they</title>
      <link>http://thomaskoefod.com/go1/lessons/templates/templates_ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/templates/templates_ii/</guid>
      <description> using range to iterate over a map, array etc inside an HTML template. You can loop over a map or array inside an HTML template by using range.
{{ range $key, $value := .News}} &amp;lt;p&amp;gt;some stuff&amp;lt;/p&amp;gt; {{ end }}  </description>
    </item>
    
  </channel>
</rss>