<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gettingstarted on Go Lang Notes</title>
    <link>http://thomaskoefod.com/go1/tags/gettingstarted/</link>
    <description>Recent content in Gettingstarted on Go Lang Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://thomaskoefod.com/go1/tags/gettingstarted/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/getting_started/</guid>
      <description>In GO programmers use camel case for names so things like &amp;lsquo;CamelCase&amp;rsquo; or &amp;lsquo;camelCase&amp;rsquo; but not &amp;lsquo;camel_case&amp;rsquo;.
Main types of Declarations:    name type syntax example     var variable var name type = expression var myVar int = 5   const constant     type      func function      Types of Variables    name type example     int integer number 25   float64 long 64 bit decimal 1.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/maps/</guid>
      <description>Map data structor maps are unsorted set of data consisting of keys and values that are associated to them. If you ask to get the value of a key that doesn&amp;rsquo;t exist &amp;lsquo;0&amp;rsquo; is returned.
   Action Example     create emptry map m := make(map[string]int)   create &amp;amp; declare n := map[string]int{&amp;quot;foo&amp;quot;: 1, &amp;quot;bar&amp;quot;: 2}   add data m[&amp;quot;k2&amp;quot;] = 13   find the length/number of values in the set len(m)   delete a key/value pair delete(m, &amp;quot;k2&amp;quot;)   get the value of a key v1 := m[&amp;quot;k2&amp;quot;]   get value of a key &amp;amp; if the key exists v1, vExists := m[&amp;quot;k2&amp;quot;]   just check if the key exists _, vExists := m[&amp;quot;k2&amp;quot;]    example:</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/packages/</guid>
      <description>Common Packages    name use description internal Links Official Documentation     fmt format used normally for printing to output  Package fmt   os operating system used for filesystem operations  Package os   io/ioutil input output used to read a file Reading A File Package ioutil   io basic I/O basic interfaces to I/O primitives  Package io   regexp Regular Expressions Regular Expressions  Package regexp    For imformation on a package you can use the go doc command.</description>
    </item>
    
    <item>
      <title>Reserved Names</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</guid>
      <description> 25 keywords that are reserved Go has 25 keywords that are reserved for the system.
 break select case struct chan switch const type continue var default defer else fallthrough for func go goto if import interface map package range return  </description>
    </item>
    
  </channel>
</rss>