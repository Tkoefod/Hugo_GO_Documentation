<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lessons on Go Lang Notes</title>
    <link>http://thomaskoefod.com/go1/</link>
    <description>Recent content in lessons on Go Lang Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://thomaskoefod.com/go1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Arrays</title>
      <link>http://thomaskoefod.com/go1/lessons/datastructors/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/datastructors/arrays/</guid>
      <description>  single type fixed length numbered sequence  Define new array examples: - var x [5]int - var x [5]float64
 builtin function append() builtin function len()  </description>
    </item>
    
    <item>
      <title>Channels</title>
      <link>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_ii/</guid>
      <description> channel basics example:
package main import &amp;quot;fmt&amp;quot; func foo(c chan int, someValue int){ c &amp;lt;- someValue * 5 } func main() { fooVal := make(chan int) // can include a struct. go foo(fooVal, 5) go foo(fooVal, 3) //v1 := &amp;lt;-fooVal //v2 := &amp;lt;-fooVal v1, v2 := &amp;lt;-fooVal, &amp;lt;-fooVal // This by default is blocking fmt.Println(v1,v2) }  </description>
    </item>
    
    <item>
      <title>Concurrency</title>
      <link>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy/</guid>
      <description>Goroutines  include &amp;lsquo;go&amp;rsquo; infront of function to make it run async. go funcName()  sync package allows the use of wait groups that empower us to include multiple goroutines into a single wait group and we can then do something once all those are complete.
 import &amp;quot;sync&amp;quot; var wg sync.WaitGroup wg.Add(1) wg.Wait() wg.Done()   Video Tutorial source  Defer statement defines that something should only run after the rest of the function is complete.</description>
    </item>
    
    <item>
      <title>Control Commands</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/control/</guid>
      <description>Control Structors (if/else/switch) if command switch Syntax:
 switch &amp;lt;variable&amp;gt; { case &amp;lt;value&amp;gt;: // some code case &amp;lt;value2&amp;gt; // some other code default: // some code that runs if the others do not. }  the switch command allows one of many conditionals to be selected based on the &amp;ldquo;switch&amp;rdquo;. In the simple and probably most commong example switch command takes a single parameter and based on it does one of many cases.</description>
    </item>
    
    <item>
      <title>Directory Operations</title>
      <link>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-iii/</guid>
      <description> Changing Directories Walking a Directory Tree </description>
    </item>
    
    <item>
      <title>File Operations</title>
      <link>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-ii/</guid>
      <description>Create a File f, err := os.Create(&amp;quot;/tmp/dat2&amp;quot;)  Opening a File  uses Package: os  f, err := os.Open(&amp;quot;/tmp/dat&amp;quot;)  Closing a File You should always close the file when you are done with it.
f.close()  Reading a File Reading a whole File (simple method)  uses Package: ioutil.ReadFile  Reading an entire file at once (not efficient for large files).
 dat, err := ioutil.ReadFile(&amp;quot;/tmp/dat&amp;quot;) if err !</description>
    </item>
    
    <item>
      <title>Filesystem</title>
      <link>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-i/</guid>
      <description>Packages  path/filepath &amp;amp;#151 filepath functions os &amp;amp;#151 main os functions flag &amp;amp;#151 used to get passed flags/parameters/arguments  How to collect passed flags/parameters/arguments to the GO program  import the flag Package ie.  import &amp;quot;flag&amp;quot;  use the flag.Arg function to get the non-flag arguments in the form of a string ie.  firstArgument := flag.Arg(0)  use the flag.Parse() to flags (have a dash) like: -d  this sets the flags to their non-default values flag.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/functions/</guid>
      <description>Functions functions in go not only can take multiple arguments but can also return multiple values.
Define a Function: func &amp;lt;funcname&amp;gt;( &amp;lt;in Variables&amp;gt; ) &amp;lt;out variable types&amp;gt; { // so somehting }
example:
func myFunction( passedParam string ) int { }  Variadic Functions Functions that take a variable amount of arguments
func sum(nums ...int) { fmt.Print(nums, &amp;quot; &amp;quot;) total := 0 for _, num := range nums { total += num } fmt.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/getting_started/</guid>
      <description>In GO programmers use camel case for names so things like &amp;lsquo;CamelCase&amp;rsquo; or &amp;lsquo;camelCase&amp;rsquo; but not &amp;lsquo;camel_case&amp;rsquo;.
Main types of Declarations:    name type syntax example     var variable var name type = expression var myVar int = 5   const constant const name type = expression const myVar string = &amp;ldquo;something&amp;rdquo;   type      func function func name (input_type) output_type { }     Types of Variables    name type example     int integer number 25   float64 long 64 bit decimal 1.</description>
    </item>
    
    <item>
      <title>Graphic Magic</title>
      <link>http://thomaskoefod.com/go1/lessons/packages/gm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/packages/gm/</guid>
      <description>GraphicsMagic  gm main site gm golang bindings site  example:
package main import ( &amp;quot;flag&amp;quot; &amp;quot;github.com/gographics/gmagick&amp;quot; ) func resize(orig string, dest string) { mw := gmagick.NewMagickWand() defer mw.Destroy() mw.ReadImage(orig) filter := gmagick.FILTER_LANCZOS w := mw.GetImageWidth() h := mw.GetImageHeight() mw.ResizeImage(w/2, h/2, filter, 1) mw.WriteImage(dest) } func main() { f := flag.String(&amp;quot;from&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;original image file ...&amp;quot;) t := flag.String(&amp;quot;to&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;target file ...&amp;quot;) flag.Parse() gmagick.Initialize() defer gmagick.Terminate() resize(*f, *t) }  so the command to use would be: thisProgram -from &amp;lt;somefile.</description>
    </item>
    
    <item>
      <title>HUGO</title>
      <link>http://thomaskoefod.com/go1/lessons/templates/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/templates/hugo/</guid>
      <description>HUGO is an exreamly fast wonderful static website generator  (HUGO)[https://gohugo.io]  HUGO takes markdown files along with TOML, JSON, or YAML and feeds that through the templates to create the site.
Types of Front Matter data types Front Matter in HUGO is the data that is included at the top of the markdown file along with some predefined variables that HUGO provides.
YAML (most common) example:
--- someKey: &amp;quot;value&amp;quot; someNum: 45 someBool: true ---  offical spec</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/loops/</guid>
      <description>Loops For loops are the only looping structure in Go Lang but with it you can simulate any While, For While, etc loop.
Basic Syntax: for &amp;lt;int&amp;gt;; &amp;lt;comparision&amp;gt;; &amp;lt;incremntor&amp;gt; { //code block }
Example:
for i := 0; i &amp;lt; 5; i++ { // do something } for i &amp;gt; 16 { i++ }  any of the options for the For loop can be left off also.
Range the range command can be used with for to easily loop over arrays, lists, etc.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>http://thomaskoefod.com/go1/lessons/datastructors/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/datastructors/maps/</guid>
      <description>built-in associative data type (aka known as hashes or dicts in other languages).
create a map m := make(map[string]int) makes map &amp;rsquo;m&amp;rsquo; with key type &amp;lsquo;string&amp;rsquo; and value type &amp;lsquo;int&amp;rsquo; example:
m := make(map[string]int) m[&amp;quot;one&amp;quot;] = 17 m[&amp;quot;two&amp;quot;] = 02 valueOne := m[&amp;quot;one&amp;quot;]  maps are unsorted set of data consisting of keys and values that are associated to them. If you ask to get the value of a key that doesn&amp;rsquo;t exist &amp;lsquo;0&amp;rsquo; is returned.</description>
    </item>
    
    <item>
      <title>Other Filesystem Operations</title>
      <link>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-iv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filesystem/filesystem-iv/</guid>
      <description> Running an external system program. </description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/packages/</guid>
      <description>Common Packages    name use description internal Links Official Documentation     fmt format used normally for printing to output  Package fmt   os operating system used for filesystem operations  Package os   io/ioutil input output used to read a file Reading A File Package ioutil   io basic I/O basic interfaces to I/O primitives  Package io   regexp Regular Expressions Regular Expressions  Package regexp    For imformation on a package you can use the go doc command.</description>
    </item>
    
    <item>
      <title>Regular Expressions</title>
      <link>http://thomaskoefod.com/go1/lessons/filters/regex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filters/regex/</guid>
      <description>Regular Expressions  use the package: &amp;lsquo;regexp&amp;rsquo;  Go By Example on Regular Expressions
Tests if a pattern matches a string match, _ := regexp.MatchString(&amp;quot;p([a-z]+)ch&amp;quot;, &amp;quot;peach&amp;quot;)  Compile a regular expression for use in others r, _ := regexp.Compile(&amp;quot;p([a-z]+)ch&amp;quot;)  online Go regex tester</description>
    </item>
    
    <item>
      <title>Reserved Names</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</guid>
      <description> 25 keywords that are reserved Go has 25 keywords that are reserved for the system.
 break select case struct chan switch const type continue var default defer else fallthrough for func go goto if import interface map package range return  </description>
    </item>
    
    <item>
      <title>Slices</title>
      <link>http://thomaskoefod.com/go1/lessons/datastructors/slices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/datastructors/slices/</guid>
      <description>single type numbered sequence  slices are typed only by the elements they contain (not the number of elements).
Declare new Slice ie: `s := make([]string, 3)`  makes a new slice of array string type length 3 with inital values of 0
assigning values s[0] = &amp;quot;something1&amp;quot; s[1] = &amp;quot;something2&amp;quot; s[2] = &amp;quot;c&amp;quot;  assign values to already created slices.
built in methods for slices append newslice = append(origSlice, newValue, newValue2)</description>
    </item>
    
    <item>
      <title>String Matching</title>
      <link>http://thomaskoefod.com/go1/lessons/filters/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/filters/filters/</guid>
      <description> Common String Matching </description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>http://thomaskoefod.com/go1/lessons/templates/templates_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/templates/templates_intro/</guid>
      <description>HTML Templates are stored in separate files normally in an html file that contains an mostly HTML segment along with handlebar like variables {{ .variableName }}.
defining template within the GO program  import HTML template library. define the template file. execute the template along with passing variables.  Import the library import io/html/template
Define the template file t, _ := template.ParseFiles(&amp;quot;templateName.html&amp;quot;) //name of new template is &amp;ldquo;t&amp;rdquo; and we do not have an error variable.</description>
    </item>
    
    <item>
      <title>Templates What are they</title>
      <link>http://thomaskoefod.com/go1/lessons/templates/templates_ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/templates/templates_ii/</guid>
      <description> using range to iterate over a map, array etc inside an HTML template. You can loop over a map or array inside an HTML template by using range.
{{ range $key, $value := .News}} &amp;lt;p&amp;gt;some stuff&amp;lt;/p&amp;gt; {{ end }}  </description>
    </item>
    
    <item>
      <title>Wait Groups</title>
      <link>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/concurrency/concurrancy_iii/</guid>
      <description> the convience of Wait Groups iterating over channels example:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; ) var wg sync.WaitGroup func foo(c chan int, someValue int){ defer wg.Done() c &amp;lt;- someValue * 5 } func main() { fooVal := make(chan int, 10) for i := 0; i &amp;lt; 10 ; i++ { wg.Add(1) go foo(fooVal, i) } wg.Wait() close(fooVal) for item := range fooVal { fmt.Println(item) } }  </description>
    </item>
    
  </channel>
</rss>