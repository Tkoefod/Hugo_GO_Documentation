<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intro on Go Lang Notes</title>
    <link>http://thomaskoefod.com/go1/lessons/intro/</link>
    <description>Recent content in Intro on Go Lang Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://thomaskoefod.com/go1/lessons/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Control Commands</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/control/</guid>
      <description>Control Structors (if/else/switch) if command switch Syntax:
 switch &amp;lt;variable&amp;gt; { case &amp;lt;value&amp;gt;: // some code case &amp;lt;value2&amp;gt; // some other code default: // some code that runs if the others do not. }  the switch command allows one of many conditionals to be selected based on the &amp;ldquo;switch&amp;rdquo;. In the simple and probably most commong example switch command takes a single parameter and based on it does one of many cases.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/functions/</guid>
      <description> Functions Define a Function: func &amp;lt;funcname&amp;gt;( &amp;lt;in Variables&amp;gt; ) &amp;lt;out variable types&amp;gt; { // so somehting }
example:
func myFunction( change )  </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/getting_started/</guid>
      <description>In GO programmers use camel case for names so things like &amp;lsquo;CamelCase&amp;rsquo; or &amp;lsquo;camelCase&amp;rsquo; but not &amp;lsquo;camel_case&amp;rsquo;.
Main types of Declarations:    name type syntax example     var variable var name type = expression var myVar int = 5   const constant const name type = expression const myVar string = &amp;ldquo;something&amp;rdquo;   type      func function func name (input_type) output_type { }     Types of Variables    name type example     int integer number 25   float64 long 64 bit decimal 1.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/loops/</guid>
      <description>Loops For loops are the only looping structure in Go Lang but with it you can simulate any While, For While, etc loop.
Basic Syntax: for &amp;lt;int&amp;gt;; &amp;lt;comparision&amp;gt;; &amp;lt;incremntor&amp;gt; { //code block }
Example:
for i := 0; i &amp;lt; 5; i++ { // do something } for i &amp;gt; 16 { i++ }  any of the options for the For loop can be left off also.
Range the range command can be used with for to easily loop over arrays, lists, etc.</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/packages/</guid>
      <description>Common Packages    name use description internal Links Official Documentation     fmt format used normally for printing to output  Package fmt   os operating system used for filesystem operations  Package os   io/ioutil input output used to read a file Reading A File Package ioutil   io basic I/O basic interfaces to I/O primitives  Package io   regexp Regular Expressions Regular Expressions  Package regexp    For imformation on a package you can use the go doc command.</description>
    </item>
    
    <item>
      <title>Reserved Names</title>
      <link>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://thomaskoefod.com/go1/lessons/intro/reserved_names/</guid>
      <description> 25 keywords that are reserved Go has 25 keywords that are reserved for the system.
 break select case struct chan switch const type continue var default defer else fallthrough for func go goto if import interface map package range return  </description>
    </item>
    
  </channel>
</rss>